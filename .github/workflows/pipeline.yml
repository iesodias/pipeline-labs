name: Deploy Multi-Ambientes

on:
  workflow_dispatch:  # Permite execução manual para testar cada ambiente

jobs:
  # Job 1: Mostra as variáveis de repositório (compartilhadas)
  mostrar-variaveis-repositorio:
    runs-on: ubuntu-latest
    steps:
      - name: Exibir variáveis de repositório
        run: |
          echo "=== VARIÁVEIS DE REPOSITÓRIO ==="
          echo "Aplicação: ${{ vars.APP_NAME }}"
          echo "Região: ${{ vars.DEFAULT_REGION }}"
          echo "Timeout padrão: ${{ vars.DEFAULT_TIMEOUT }}"
          echo "Versão do Node: ${{ vars.NODE_VERSION }}"

  # Job 2: Deploy em Desenvolvimento
  deploy-dev:
    runs-on: ubuntu-latest
    environment: dev  # Usa o environment "dev"
    steps:
      - name: Configurar ambiente DEV
        run: |
          echo "=== DEPLOY EM DESENVOLVIMENTO ==="
          echo "Aplicação: ${{ vars.APP_NAME }}"
          echo "Ambiente: ${{ vars.ENVIRONMENT }}"
          echo "API URL: ${{ vars.API_URL }}"
          echo "Database: ${{ vars.DATABASE_NAME }}"
          echo "Região: ${{ vars.DEFAULT_REGION }}"
          echo "Debug Mode: ${{ vars.DEBUG_MODE }}"
          echo "Max Connections: ${{ vars.MAX_CONNECTIONS }}"

      - name: Simular build para DEV
        run: |
          echo "Compilando aplicação para ${{ vars.ENVIRONMENT }}..."
          echo "URL de destino: ${{ vars.API_URL }}"
          sleep 2
          echo "Build concluído para DEV"

  # Job 3: Deploy em Staging
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging  # Usa o environment "staging"
    needs: deploy-dev     # Só executa após deploy-dev
    steps:
      - name: Configurar ambiente STAGING
        run: |
          echo "=== DEPLOY EM STAGING ==="
          echo "Aplicação: ${{ vars.APP_NAME }}"
          echo "Ambiente: ${{ vars.ENVIRONMENT }}"
          echo "API URL: ${{ vars.API_URL }}"
          echo "Database: ${{ vars.DATABASE_NAME }}"
          echo "Região: ${{ vars.DEFAULT_REGION }}"
          echo "Debug Mode: ${{ vars.DEBUG_MODE }}"
          echo "Max Connections: ${{ vars.MAX_CONNECTIONS }}"

      - name: Simular testes de integração
        run: |
          echo "Executando testes em ${{ vars.ENVIRONMENT }}..."
          echo "Endpoint: ${{ vars.API_URL }}/health"
          sleep 2
          echo "Testes aprovados em STAGING"

  # Job 4: Deploy em Produção
  deploy-production:
    runs-on: ubuntu-latest
    environment: production  # Usa o environment "production"
    needs: deploy-staging    # Só executa após deploy-staging
    steps:
      - name: Configurar ambiente PRODUCTION
        run: |
          echo "=== DEPLOY EM PRODUÇÃO ==="
          echo "Aplicação: ${{ vars.APP_NAME }}"
          echo "Ambiente: ${{ vars.ENVIRONMENT }}"
          echo "API URL: ${{ vars.API_URL }}"
          echo "Database: ${{ vars.DATABASE_NAME }}"
          echo "Região: ${{ vars.DEFAULT_REGION }}"
          echo "Debug Mode: ${{ vars.DEBUG_MODE }}"
          echo "Max Connections: ${{ vars.MAX_CONNECTIONS }}"

      - name: Deploy em produção
        run: |
          echo "Realizando deploy em ${{ vars.ENVIRONMENT }}..."
          echo "URL pública: ${{ vars.API_URL }}"
          sleep 3
          echo "Deploy em PRODUÇÃO concluído com sucesso!"

      - name: Notificar equipe
        run: |
          echo "Enviando notificação de deploy para ${{ vars.API_URL }}"
          echo "Versão implantada: ${{ vars.APP_NAME }} em ${{ vars.ENVIRONMENT }}"